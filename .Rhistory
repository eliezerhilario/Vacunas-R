View(Datos)
Datos1 <- vroom::vroom('data/Datos.csv', col_types = c('numeric', 'text', 'date', 'text', 'text', 'text', 'text', 'text', 'numeric'))
View(Datos1)
Datos <- read_excel('data/Datos.xlsx',
col_types = c('FECHA APERTURA' = 'date')) %>%
mutate(AÑO = strftime(`FECHA APERTURA`,'%Y'), MES = strftime(`FECHA APERTURA`,'%m'),
PERIODO = paste0(AÑO, '-', MES),
# PERIODO1 = floor_date(`FECHA APERTURA`, 'month')
)
Datos <- read_excel('data/Datos.xlsx',
col_types = c('FECHA APERTURA' = 'date'))
View(Datos)
Datos <- read_excel('data/Datos.xlsx',
col_types = c(`FECHA APERTURA` = 'date')) %>%
mutate(AÑO = strftime(`FECHA APERTURA`,'%Y'), MES = strftime(`FECHA APERTURA`,'%m'),
PERIODO = paste0(AÑO, '-', MES),
# PERIODO1 = floor_date(`FECHA APERTURA`, 'month')
)
View(Datos)
Datos <- read_excel('data/Datos.xlsx',
col_types = c('numeric', 'text', 'date', 'text', 'text', 'text', 'text', 'text', 'numeric')) %>%
mutate(AÑO = strftime(`FECHA APERTURA`,'%Y'), MES = strftime(`FECHA APERTURA`,'%m'),
PERIODO = paste0(AÑO, '-', MES),
# PERIODO1 = floor_date(`FECHA APERTURA`, 'month')
)
View(Datos)
Datos <- read_excel('data/Datos.xlsx',
col_types = c('numeric', 'text', 'date', 'text', 'text', 'text', 'text', 'text', 'numeric')) %>%
mutate(AÑO = strftime(`FECHA APERTURA`,'%Y'), MES = strftime(`FECHA APERTURA`,'%m'),
PERIODO = paste0(AÑO, '-', MES)
# PERIODO1 = floor_date(`FECHA APERTURA`, 'month')
)
Datos <- read_excel('data/Datos.xlsx',
col_types = c('numeric', 'text', 'date', 'text', 'text', 'text', 'text', 'text', 'numeric')) %>%
mutate(AÑO = strftime(`FECHA APERTURA`,'%Y'), MES = strftime(`FECHA APERTURA`,'%m'),
PERIODO = paste0(AÑO, '-', MES)
# PERIODO1 = floor_date(`FECHA APERTURA`, 'month')
)
Datos <- read_excel('data/Datos.xlsx',
col_types = c('numeric', 'text', 'date', 'text', 'text', 'text', 'text', 'text', 'numeric')) %>%
mutate(AÑO = strftime(`FECHA APERTURA`,'%Y'), MES = strftime(`FECHA APERTURA`,'%m'),
PERIODO = paste0(AÑO, '-', MES)
# PERIODO1 = floor_date(`FECHA APERTURA`, 'month')
)
Datos <- read_excel('data/Datos.xlsx',
col_types = c('text', 'text', 'date', 'text', 'text', 'text', 'text', 'text', 'numeric')) %>%
mutate(AÑO = strftime(`FECHA APERTURA`,'%Y'), MES = strftime(`FECHA APERTURA`,'%m'),
PERIODO = paste0(AÑO, '-', MES)
# PERIODO1 = floor_date(`FECHA APERTURA`, 'month')
)
Datos <- read_excel('data/Datos.xlsx',
col_types = c('text', 'text', 'date', 'text', 'text', 'text', 'text', 'text', 'numeric')) %>%
mutate(AÑO = strftime(`FECHA APERTURA`,'%Y'), MES = strftime(`FECHA APERTURA`,'%m'),
PERIODO = paste0(AÑO, '-', MES),
# PERIODO1 = floor_date(`FECHA APERTURA`, 'month')
)
install.packages("learnr")
shiny::runApp()
print(seleccionMedida)
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
# DATOS GRAFICO PRUEBA  ==========================================
DatosPrueba = Datos %>% group_by(MES, AÑO) %>%
summarise(MONTO = sum(`MONTO AUTORIZADO`),
AUTORIZACIONES = n_distinct(INTEGRALIDAD),
`MM AUTORIZACION` = MONTO / AUTORIZACIONES,
USUARIOS = n_distinct(CDPERSON),
`MM USUARIO` = MONTO / USUARIOS
# .groups = "drop"
)
View(DatosPrueba)
# DATOS GRAFICO PRUEBA  ==========================================
DatosPrueba = Datos %>% group_by(MES, AÑO) %>%
summarise(MONTO = sum(`MONTO AUTORIZADO`),
AUTORIZACIONES = n_distinct(INTEGRALIDAD),
`MM AUTORIZACION` = MONTO / AUTORIZACIONES,
USUARIOS = n_distinct(CDPERSON),
`MM USUARIO` = MONTO / USUARIOS,
.groups = "drop"
)
View(DatosPrueba)
runApp()
runApp()
runApp()
runApp()
source("C:/Users/Hilario Cabrera/ADMINISTRADORA DE RIESGOS DE SALUD PALIC/Departamento De Actuaria - Documentos/Analisis RStudio/Shiny/Vacunas-R/modules/grafico.R", echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(DatosPrueba)
View(Datos)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
# LIBRERÍAS ==========================================
library(shiny)
library(shinydashboard)
# library(shinydashboardPlus)
# library(shinyWidgets)
library(tidyverse)
# library(lubridate)
# library(reactlog)
# reactlog_enable()
library(readxl)
require(scales) # Para que la función scale_y_continuous de los gráficos funcione
# CARGAR MÓDULOS ==========================================
source('modules/medidas.R')
source('modules/grafico.R')
# IMPORTAR DATOS ==========================================
if (!exists('Datos')) {
Datos <- read_excel('data/Datos.xlsx',
col_types = c('text', 'text', 'date', 'text', 'text', 'text', 'text', 'text', 'numeric')) %>%
mutate(AÑO = strftime(`FECHA APERTURA`,'%Y'), MES = strftime(`FECHA APERTURA`,'%m'),
PERIODO = paste0(AÑO, '-', MES),
# PERIODO1 = floor_date(`FECHA APERTURA`, 'month')
)
# Datos1 <- vroom::vroom('data/Datos.csv', col_types = c('FECHA APERTURA' = 'D')) %>%
# mutate(AÑO = strftime(`FECHA APERTURA`,'%Y'), MES = strftime(`FECHA APERTURA`,'%m'),
#        PERIODO = paste0(AÑO, '-', MES),
# PERIODO1 = floor_date(`FECHA APERTURA`, 'month')
# )#Revisar como importar fechas con este método
}
# DATOS GRAFICO PRUEBA  ==========================================
DatosPrueba = Datos %>% group_by(MES, AÑO) %>%
summarise(MONTO = sum(`MONTO AUTORIZADO`),
AUTORIZACIONES = n_distinct(INTEGRALIDAD),
`MM AUTORIZACION` = MONTO / AUTORIZACIONES,
USUARIOS = n_distinct(CDPERSON),
`MM USUARIO` = MONTO / USUARIOS,
.groups = "drop"
)
# DATOS INPUTS ==========================================
Indicadores = choices = c('MONTO', 'AUTORIZACIONES', 'MM AUTORIZACION', 'USUARIOS', 'MM USUARIO')
View(DatosPrueba)
runApp()
View(DatosPrueba)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(DatosPrueba)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(DatosPrueba)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
tagList(
choice = Datos %>% select(.data[[campo]]) %>% unique(),
selectizeInput(ns('filtro'), label = campo,
choice = c('TODAS', choice()))
)
Datos %>% select(`TIPO COBERTURA`) %>% unique()
Datos %>% unique(`TIPO COBERTURA`)
Datos %>% unique(`TIPO COBERTURA`)
Datos %>% select(`TIPO COBERTURA`) %>% unique()
Datos %>% select(`TIPO COBERTURA`) %>% distinct()
runApp()
shiny::runApp()
runApp()
Datos %>% distinct(`TIPO COBERTURA`)
runApp()
shiny::runApp()
runApp()
runApp()
HOla
HOla %>% unique(Datos$`TIPO COBERTURA`)
HOla = unique(Datos$`TIPO COBERTURA`)
HOla
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# HOla = unique(Datos$`TIPO COBERTURA`)
Datos %>% unique(`TIPO COBERTURA`)
# HOla = unique(Datos$`TIPO COBERTURA`)
unique(Datos$`TIPO COBERTURA`)
runApp()
runApp()
runApp()
runApp()
unique(Datos$`TIPO COBERTURA`)
runApp()
unique(Datos,`TIPO COBERTURA`)
runApp()
# HOla = unique(Datos$`TIPO COBERTURA`)
unique(Datos,`TIPO COBERTURA`, incomparables = FALSE)
# HOla = unique(Datos$`TIPO COBERTURA`)
Datos %>% unique(Datos,`TIPO COBERTURA`)
Datos %>% unique(Datos,`TIPO COBERTURA`)
# HOla = unique(Datos$`TIPO COBERTURA`)
Datos %>% unique(`TIPO COBERTURA`)
# HOla = unique(Datos$`TIPO COBERTURA`)
Datos %>% unique({{`TIPO COBERTURA`}})
# HOla = unique(Datos$`TIPO COBERTURA`)
Datos %>% unique({{`TIPO COBERTURA`}})
# LIBRERÍAS ==========================================
library(shiny)
library(shinydashboard)
# library(shinydashboardPlus)
# library(shinyWidgets)
library(tidyverse)
library(lubridate)
# library(reactlog)
# reactlog_enable()
library(readxl)
require(scales)
# HOla = unique(Datos$`TIPO COBERTURA`)
Datos %>% unique({{`TIPO COBERTURA`}})
# HOla = unique(Datos$`TIPO COBERTURA`)
Datos %>% unique(`TIPO COBERTURA`)
# HOla = unique(Datos$`TIPO COBERTURA`)
Datos %>% distinct(`TIPO COBERTURA`)
runApp()
Datos %>% distinct(`TIPO COBERTURA`)
Datos %>% unique(`TIPO COBERTURA`)
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
View(data)
View(Datos)
rm(HOla)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(Datos)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Medidas  ----------------------------------------
Hola = setNames(Datos$`COD COBERTURA`, Datos$COBERTURA)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# LIBRERÍAS ==========================================
library(shiny)
library(shinydashboard)
# library(echarts4r)
# library(shinydashboardPlus)
# library(shinyWidgets)
library(tidyverse)
library(lubridate)
library(reactlog)
reactlog_enable()
library(readxl)
require(scales) # Para que la función scale_y_continuous de los gráficos funcione
source("C:/Users/DH311885/ADMINISTRADORA DE RIESGOS DE SALUD PALIC/Departamento De Actuaria - Documentos/Analisis RStudio/Shiny/Vacunas-R/modules/filtros.R", echo=TRUE)
shiny::runApp()
runApp()
runApp()
shiny::runApp()
# LIBRERÍAS ==========================================
library(shiny)
library(shinydashboard)
# library(echarts4r)
# library(shinydashboardPlus)
# library(shinyWidgets)
library(tidyverse)
library(lubridate)
library(reactlog)
reactlog_enable()
library(readxl)
require(scales)
get(Datos)
get(names(Datos))
lapply(names(Datos), get)
View(Datos)
Prueba = lapply(names(Datos), get)
x = names(Datos)
x
Prueba = lapply(names(Datos), get)
Prueba = lapply(x, get)
x = list(names(Datos))
Prueba = lapply(x, get)
x
x = list(Datos
Prueba = lapply(x, get)
x = list(Datos)
Prueba = lapply(x, get)
Prueba = lapply(x, get)
x = list(names(Datos))
Prueba = lapply(x, get)
x = names(Datos)
Prueba = lapply(x, get)
Prueba = lapply(x, get)
x
get(x)
get(Datos$COBERTURA)
get(Datos$`COD COBERTURA`)
attach(Datos)
get(Datos$`COD COBERTURA`)
get(`COD COBERTURA`)
attach(Datos)
get(`COD COBERTURA`)
x = names(Datos)
attach(Datos)
attach(Datos)
attach(Datos)
get(`COD COBERTURA`)
# library(echarts4r)
# library(shinydashboardPlus)
# library(shinyWidgets)
library(tidyverse)
attach(Datos)
get(`COD COBERTURA`)
detach(Datos)
Prueba = lapply(x, get)
attach(Datos)
detach(Datos)
detach(Datos)
detach(Datos)
attach(Datos)
get(`COD COBERTURA`)
detach(Datos)
shiny::runApp()
count(Datos,`TIPO RECLAMANTE`)
count(Datos,`TIPO RECLAMANTE`,sort = desc())
count(Datos,`TIPO RECLAMANTE`,sort = desc(`TIPO RECLAMANTE`))
runApp()
runApp()
runApp()
runApp()
runApp()
