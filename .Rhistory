ggplot(Prueba, aes(PERIODO, MONTO)) +  geom_point()
runApp('Vacunas.R')
Datos %>% count(PERIODO, wt = `MONTO AUTORIZADO`, name = 'MONTO') %>%
mutate(PERIODO = as.Date(PERIODO))
Datos %>% count(PERIODO, wt = `MONTO AUTORIZADO`, name = 'MONTO')
Prueba =Datos %>% count(PERIODO, wt = `MONTO AUTORIZADO`, name = 'MONTO')
ggplot(Prueba, aes(PERIODO, MONTO)) +  geom_point()
ggplot(Prueba, aes(PERIODO, MONTO)) +  geom_point()+ geom_line()
View(Prueba)
runApp('Vacunas.R')
View(Datos)
# Datos <- vroom::vroom('Datos.zip', show_col_types = FALSE) Revisar como importar fechas con este método
library(readxl)
Datos <- read_excel('Datos.xlsx',
col_types = c('numeric', 'text', 'date', 'text', 'text', 'text', 'text', 'text', 'numeric')) %>%
mutate(AÑO = strftime(`FECHA APERTURA`,'%y'), MES = strftime(`FECHA APERTURA`,'%m'),
PERIODO = paste0(AÑO, '-', MES),
PERIODO1 = paste0(AÑO, '-', MES, '-1')
)
View(Datos)
Datos <- read_excel('Datos.xlsx',
col_types = c('numeric', 'text', 'date', 'text', 'text', 'text', 'text', 'text', 'numeric')) %>%
mutate(AÑO = strftime(`FECHA APERTURA`,'%y'), MES = strftime(`FECHA APERTURA`,'%m'),
PERIODO = paste0(AÑO, '-', MES),
PERIODO1 = paste0(AÑO, '-', MES, '-01')
)
Datos <- read_excel('Datos.xlsx',
col_types = c('numeric', 'text', 'date', 'text', 'text', 'text', 'text', 'text', 'numeric')) %>%
mutate(AÑO = strftime(`FECHA APERTURA`,'%y'), MES = strftime(`FECHA APERTURA`,'%m'),
PERIODO = paste0(AÑO, '-', MES),
PERIODO1 = as.Date(paste0(AÑO, '-', MES, '-01'))
)
View(Datos)
Datos <- read_excel('Datos.xlsx',
col_types = c('numeric', 'text', 'date', 'text', 'text', 'text', 'text', 'text', 'numeric')) %>%
mutate(AÑO = strftime(`FECHA APERTURA`,'%y'), MES = strftime(`FECHA APERTURA`,'%m'),
PERIODO = paste0(AÑO, '-', MES),
PERIODO1 = as.Date(paste0(AÑO, '-', MES, '-1'))
)
View(Datos)
Datos <- read_excel('Datos.xlsx',
col_types = c('numeric', 'text', 'date', 'text', 'text', 'text', 'text', 'text', 'numeric')) %>%
mutate(AÑO = strftime(`FECHA APERTURA`,'%y'), MES = strftime(`FECHA APERTURA`,'%m'),
PERIODO = paste0(AÑO, '-', MES),
PERIODO1 = as.Date(paste0(strftime(`FECHA APERTURA`,'%y'), '-1'))
)
View(Prueba)
View(Datos)
library(libridate)
library(lubridate)
Datos <- read_excel('Datos.xlsx',
col_types = c('numeric', 'text', 'date', 'text', 'text', 'text', 'text', 'text', 'numeric')) %>%
mutate(AÑO = strftime(`FECHA APERTURA`,'%y'), MES = strftime(`FECHA APERTURA`,'%m'),
PERIODO = paste0(AÑO, '-', MES),
PERIODO1 = floor_date(`FECHA APERTURA`, 'month')
)
View(Prueba)
View(Datos)
runApp('Vacunas.R')
Datos %>% group_by(PERIODO1) %>%
summarise(MONTO = sum(`MONTO AUTORIZADO`),
AUTORIZACIONES = n_distinct(INTEGRALIDAD),
`MM AUTORIZACION` = MONTO / AUTORIZACIONES,
USUARIOS = n_distinct(CDPERSON),
`MM USUARIO` = MONTO / USUARIOS
)
runApp('Vacunas.R')
Datos <- read_excel('Datos.xlsx',
col_types = c('numeric', 'text', 'date', 'text', 'text', 'text', 'text', 'text', 'numeric')) %>%
mutate(AÑO = strftime(`FECHA APERTURA`,'%y'), MES = strftime(`FECHA APERTURA`,'%m'),
# PERIODO = paste0(AÑO, '-', MES),
PERIODO = floor_date(`FECHA APERTURA`, 'month')
)
Datos <- read_excel('Datos.xlsx',
col_types = c('numeric', 'text', 'date', 'text', 'text', 'text', 'text', 'text', 'numeric')) %>%
mutate(AÑO = strftime(`FECHA APERTURA`,'%y'), MES = strftime(`FECHA APERTURA`,'%m'),
# PERIODO = paste0(AÑO, '-', MES),
PERIODO = floor_date(`FECHA APERTURA`, 'month')
)
runApp('Vacunas.R')
runApp('Vacunas.R')
runApp('Vacunas.R')
library(shiny); runApp('Vacunas.R')
library(shiny)
library(shinydashboard)
library(tidyverse)
library(lubridate)
# Datos <- vroom::vroom('Datos.zip', show_col_types = FALSE) Revisar como importar fechas con este método
library(readxl)
Datos <- read_excel('Datos.xlsx',
col_types = c('numeric', 'text', 'date', 'text', 'text', 'text', 'text', 'text', 'numeric')) %>%
mutate(AÑO = strftime(`FECHA APERTURA`,'%y'), MES = strftime(`FECHA APERTURA`,'%m'),
PERIODO = factor(paste0(AÑO, '-', MES))
# PERIODO = floor_date(`FECHA APERTURA`, 'month')
)
View(Datos)
runApp('Vacunas.R')
Datos <- read_excel('Datos.xlsx',
col_types = c('numeric', 'text', 'date', 'text', 'text', 'text', 'text', 'text', 'numeric')) %>%
mutate(AÑO = strftime(`FECHA APERTURA`,'%y'), MES = strftime(`FECHA APERTURA`,'%m'),
# PERIODO = paste0(AÑO, '-', MES),
PERIODO = floor_date(`FECHA APERTURA`, 'month')
)
runApp('Vacunas.R')
Datos <- read_excel('Datos.xlsx',
col_types = c('numeric', 'text', 'date', 'text', 'text', 'text', 'text', 'text', 'numeric')) %>%
mutate(AÑO = strftime(`FECHA APERTURA`,'%y'), MES = strftime(`FECHA APERTURA`,'%m'),
PERIODO1 = paste0(AÑO, '-', MES),
PERIODO = floor_date(`FECHA APERTURA`, 'month')
)
View(Datos)
Datos <- read_excel('Datos.xlsx',
col_types = c('numeric', 'text', 'date', 'text', 'text', 'text', 'text', 'text', 'numeric')) %>%
mutate(AÑO = strftime(`FECHA APERTURA`,'%Y'), MES = strftime(`FECHA APERTURA`,'%m'),
PERIODO1 = paste0(AÑO, '-', MES),
PERIODO = floor_date(`FECHA APERTURA`, 'month')
)
View(Datos)
data %>%
summarise(n = n(), min = min({{ var }}), max = max({{ var }}))
library(shiny)
library(shinydashboard)
library(tidyverse)
library(lubridate)
data %>%
summarise(n = n(), min = min({{ var }}), max = max({{ var }}))
mtcars %>%
group_by(cyl) %>%
var_summary(mpg)
library(shiny); runApp('Vacunas.R')
library(shiny); runApp('Vacunas.R')
runApp('Vacunas.R')
runApp('Vacunas.R')
runApp('Vacunas.R')
runApp('Vacunas.R')
# UI ==================
ui <- dashboardPage(
title = 'Demo Dashboard', skin= 'green',
## Header ----------------------------------------
dashboardHeader(title = 'Demo Dashboard'),
## Sidebar ----------------------------------------
dashboardSidebar(
sidebarMenu(id='sidebarID',
menuItem('General', tabName = 'general', icon = shiny::icon('home')),
menuItem('Tipo Cobertura', tabName = 'tipo_cobertura', icon = shiny::icon('home')),
menuItem('Tipo PSS', tabName = 'tipo_pss', icon = shiny::icon('home')),
menuItem('Centros Especializados', tabName = 'centros_especializados', icon = shiny::icon('home')),
menuItem('Coberturas', tabName = 'coberturas', icon = shiny::icon('home')),
menuItem('PSS por Cobertura', tabName = 'pss_por_cobertura', icon = shiny::icon('home'))
)
),
## Body ----------------------------------------
dashboardBody(
tags$head(tags$link(rel = "stylesheet", type = "text/css", href = "styles")),
tabItems(
### Tab General ----------------------------------------
tabItem(tabName = 'general',
fluidRow(column(4, selectInput('indicador_general', 'INDICADOR', choices = Indicadores))),
fluidRow(
box(title = 'INDICADORES GENERALES',
plotOutput('grafico_general'),
width = 6,
status = 'success',
solidHeader = T)
),
# fluidRow(column(4, selectInput('indicador_general_continuo', 'INDICADOR', choices = Indicadores))),
fluidRow(
box(title = 'Gráfico',
plotOutput('grafico_continuo'),
status = 'success',
width = 12,
solidHeader = T)
)
),
### Tab Tipo Cobertura ----------------------------------------
tabItem(tabName = 'tipo_cobertura',
fluidRow(
column(width=9,
valueBox('9 Meses','Periodo: Marzo-Diciembre',icon=icon('eye'),color='yellow'),
valueBoxOutput('valuebox'),
infoBox('Dato abiertos', '100%'),
),
column(width=3, imageOutput('figura', width='10%',height='150px')),
fluidRow(box(title='GRÁFICO',plotOutput('montos'), width=9, status='primary', solidHeader=TRUE)))
),
### Tab Tipo PSS ----------------------------------------
tabItem(tabName = 'tipo_pss'
),
### Tab Centros Especializados ----------------------------------------
tabItem(tabName = 'centros_especializados'
),
### Tab Coberturas ----------------------------------------
tabItem(tabName = 'coberturas',
DT::dataTableOutput('datos')
),
### Tab PSS por Cobertura ----------------------------------------
tabItem(tabName = 'pss_por_cobertura',
selectInput('cobertura', 'COBERTURA',
choices = c(TODAS = '', setNames(Coberturas$`COD COBERTURA`, Coberturas$COBERTURA)),
# options = list(placeholder = 'Seleccione una Cobertura'),
width = '100%')
)
)
)
)
# UI ==================
ui <- dashboardPage(
title = 'Demo Dashboard', skin= 'green',
## Header ----------------------------------------
dashboardHeader(title = 'Demo Dashboard'),
## Sidebar ----------------------------------------
dashboardSidebar(
sidebarMenu(id='sidebarID',
menuItem('General', tabName = 'general', icon = shiny::icon('home')),
menuItem('Tipo Cobertura', tabName = 'tipo_cobertura', icon = shiny::icon('home')),
menuItem('Tipo PSS', tabName = 'tipo_pss', icon = shiny::icon('home')),
menuItem('Centros Especializados', tabName = 'centros_especializados', icon = shiny::icon('home')),
menuItem('Coberturas', tabName = 'coberturas', icon = shiny::icon('home')),
menuItem('PSS por Cobertura', tabName = 'pss_por_cobertura', icon = shiny::icon('home'))
)
),
## Body ----------------------------------------
dashboardBody(
tags$head(tags$link(rel = "stylesheet", type = "text/css", href = "styles")),
tabItems(
### Tab General ----------------------------------------
tabItem(tabName = 'general',
fluidRow(column(4, selectInput('indicador_general', 'INDICADOR', choices = Indicadores))),
fluidRow(
box(title = 'INDICADORES GENERALES',
plotOutput('grafico_general'),
width = 6,
status = 'success',
solidHeader = T)
),
# fluidRow(column(4, selectInput('indicador_general_continuo', 'INDICADOR', choices = Indicadores))),
fluidRow(
box(title = 'Gráfico',
plotOutput('grafico_continuo'),
status = 'success',
width = 12,
solidHeader = T)
)
),
### Tab Tipo Cobertura ----------------------------------------
tabItem(tabName = 'tipo_cobertura',
fluidRow(
column(width=9,
valueBox('9 Meses','Periodo: Marzo-Diciembre',icon=icon('eye'),color='yellow'),
valueBoxOutput('valuebox'),
infoBox('Dato abiertos', '100%'),
),
column(width=3, imageOutput('figura', width='10%',height='150px')),
fluidRow(box(title='GRÁFICO',plotOutput('montos'), width=9, status='primary', solidHeader=TRUE)))
),
### Tab Tipo PSS ----------------------------------------
tabItem(tabName = 'tipo_pss'
),
### Tab Centros Especializados ----------------------------------------
tabItem(tabName = 'centros_especializados'
),
### Tab Coberturas ----------------------------------------
tabItem(tabName = 'coberturas',
DT::dataTableOutput('datos')
),
### Tab PSS por Cobertura ----------------------------------------
tabItem(tabName = 'pss_por_cobertura',
selectInput('cobertura', 'COBERTURA',
choices = c(TODAS = '', setNames(Coberturas$`COD COBERTURA`, Coberturas$COBERTURA)),
# options = list(placeholder = 'Seleccione una Cobertura'),
width = '100%')
)
)
)
)
library(shiny)
library(shinydashboard)
library(tidyverse)
library(lubridate)
library(shiny)
library(shinydashboard)
library(tidyverse)
library(lubridate)
Datos <- read_excel('Datos.xlsx',
col_types = c('numeric', 'text', 'date', 'text', 'text', 'text', 'text', 'text', 'numeric')) %>%
mutate(AÑO = strftime(`FECHA APERTURA`,'%Y'), MES = strftime(`FECHA APERTURA`,'%m'),
PERIODO1 = paste0(AÑO, '-', MES),
PERIODO = floor_date(`FECHA APERTURA`, 'month')
)
library(shiny)
library(shinydashboard)
library(tidyverse)
library(lubridate)
# Importar datos
if (!exists('Datos')) {
# Datos <- vroom::vroom('Datos.zip', show_col_types = FALSE) Revisar como importar fechas con este método
library(readxl)
Datos <- read_excel('Datos.xlsx',
col_types = c('numeric', 'text', 'date', 'text', 'text', 'text', 'text', 'text', 'numeric')) %>%
mutate(AÑO = strftime(`FECHA APERTURA`,'%Y'), MES = strftime(`FECHA APERTURA`,'%m'),
PERIODO1 = paste0(AÑO, '-', MES),
PERIODO = floor_date(`FECHA APERTURA`, 'month')
)
Coberturas = Datos %>% distinct(`COD COBERTURA`, COBERTURA)
}
Indicadores = c('MONTO', 'AUTORIZACIONES', 'MM AUTORIZACION', 'USUARIOS', 'MM USUARIO')
# UI ==================
ui <- dashboardPage(
title = 'Demo Dashboard', skin= 'green',
## Header ----------------------------------------
dashboardHeader(title = 'Demo Dashboard'),
## Sidebar ----------------------------------------
dashboardSidebar(
sidebarMenu(id='sidebarID',
menuItem('General', tabName = 'general', icon = shiny::icon('home')),
menuItem('Tipo Cobertura', tabName = 'tipo_cobertura', icon = shiny::icon('home')),
menuItem('Tipo PSS', tabName = 'tipo_pss', icon = shiny::icon('home')),
menuItem('Centros Especializados', tabName = 'centros_especializados', icon = shiny::icon('home')),
menuItem('Coberturas', tabName = 'coberturas', icon = shiny::icon('home')),
menuItem('PSS por Cobertura', tabName = 'pss_por_cobertura', icon = shiny::icon('home'))
)
),
## Body ----------------------------------------
dashboardBody(
tags$head(tags$link(rel = "stylesheet", type = "text/css", href = "styles")),
tabItems(
### Tab General ----------------------------------------
tabItem(tabName = 'general',
fluidRow(column(4, selectInput('indicador_general', 'INDICADOR', choices = Indicadores))),
fluidRow(
box(title = 'INDICADORES GENERALES',
plotOutput('grafico_general'),
width = 6,
status = 'success',
solidHeader = T)
),
# fluidRow(column(4, selectInput('indicador_general_continuo', 'INDICADOR', choices = Indicadores))),
fluidRow(
box(title = 'Gráfico',
plotOutput('grafico_continuo'),
status = 'success',
width = 12,
solidHeader = T)
)
),
### Tab Tipo Cobertura ----------------------------------------
tabItem(tabName = 'tipo_cobertura',
fluidRow(
column(width=9,
valueBox('9 Meses','Periodo: Marzo-Diciembre',icon=icon('eye'),color='yellow'),
valueBoxOutput('valuebox'),
infoBox('Dato abiertos', '100%'),
),
column(width=3, imageOutput('figura', width='10%',height='150px')),
fluidRow(box(title='GRÁFICO',plotOutput('montos'), width=9, status='primary', solidHeader=TRUE)))
),
### Tab Tipo PSS ----------------------------------------
tabItem(tabName = 'tipo_pss'
),
### Tab Centros Especializados ----------------------------------------
tabItem(tabName = 'centros_especializados'
),
### Tab Coberturas ----------------------------------------
tabItem(tabName = 'coberturas',
DT::dataTableOutput('datos')
),
### Tab PSS por Cobertura ----------------------------------------
tabItem(tabName = 'pss_por_cobertura',
selectInput('cobertura', 'COBERTURA',
choices = c(TODAS = '', setNames(Coberturas$`COD COBERTURA`, Coberturas$COBERTURA)),
# options = list(placeholder = 'Seleccione una Cobertura'),
width = '100%')
)
)
)
)
# APP ==================
# shinyApp(ui, server)
shiny::runApp()
runApp()
shiny::runApp()
Datos %>% group_by(PERIODO, `TIPO COBERTURA`) %>% summary_var()
# Tap Tipo Coberuras ----------------------------------------
summary_var = function(data){
summarise(MONTO = sum(data$`MONTO AUTORIZADO`),
AUTORIZACIONES = n_distinct(INTEGRALIDAD),
`MM AUTORIZACION` = MONTO / AUTORIZACIONES,
USUARIOS = n_distinct(CDPERSON),
`MM USUARIO` = MONTO / USUARIOS
)
}
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("reactlog")
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
View(Datos)
View(Coberturas)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
View(DataGraficos)
View(DataGraficos)
View(DataGraficos)
View(ModeloGrafico)
View(DataGraficosConFiltro)
View(DataGraficos)
runApp()
runApp()
shiny::runApp()
git iniç
git ini
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
View(bodyUI)
View(DataGraficosConFiltro)
runApp()
runApp()
View(Datos)
# Preparar los datos del gráfico
datosGrafico = reactive(dataGraficos(AÑO, MES))
# Preparar los datos del gráfico
datosGrafico = reactive(dataGraficos(AÑO, MES))
## Datos Graficos ----------------------------------------
dataGraficos = function(x, y = NULL) {
Datos %>% group_by({{x}}, {{y}}) %>%
summarise(MONTO = sum(`MONTO AUTORIZADO`),
AUTORIZACIONES = n_distinct(INTEGRALIDAD),
`MM AUTORIZACION` = MONTO / AUTORIZACIONES,
USUARIOS = n_distinct(CDPERSON),
`MM USUARIO` = MONTO / USUARIOS,
.groups = "drop"
)
}
View(dataGraficos)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(Datos)
runApp()
runApp()
runApp()
View(Datos)
View(Datos)
modeloGrafico(datosGrafico(), x = 'PERIODO', y = input$indicadores, group = `TIPO COBERTURA`)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
dataGraficos
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
