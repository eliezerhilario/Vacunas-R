runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Datos %>% filter('TIPO RECLAMANTE' == 'MEDICO'),
Datos %>% filter('TIPO RECLAMANTE' == 'MEDICO')
pRUEBA = Datos %>% filter('TIPO RECLAMANTE' == 'MEDICO')
View(pRUEBA)
Datos
distinct(Datos$`TIPO RECLAMANTE`)
unique(Datos$`TIPO RECLAMANTE`)
runApp()
View(pRUEBA)
View(pRUEBA)
pRUEBA = Datos %>% filter(`TIPO RECLAMANTE` == 'MEDICO')
View(pRUEBA)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
View(Datos)
runApp()
shiny::runApp()
runApp()
View(iris)
library(echarts4r)
# Datos de pruega ========================================
Prueba = Datos %>% group_by(`TIPO RECLAMANTE`, PERIODO) %>%
summarise(MONTO = sum(`MONTO AUTORIZADO`),
AUTORIZACIONES = n_distinct(INTEGRALIDAD),
`MM AUTORIZACION` = MONTO / AUTORIZACIONES,
USUARIOS = n_distinct(CDPERSON),
`MM USUARIO` = MONTO / USUARIOS,
.groups = "drop"
)
View(Prueba)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
graficoServer <- function(id, datos, x, y, group) {
moduleServer(id, function(input, output, session) {
output$grafico <- renderEcharts4r({
datos %>% group_by(.data[[group]]) %>%
e_charts(x = .data[[x]]) %>%
e_line(serie = .data[[y]], symbol = 'circle', symbolSize = 10) %>%
e_tooltip(trigger = 'axis')
})
# ggplot(datos, aes({{x}}, {{y}}, group = {{group}}, color = {{group}})) +
# # ggplot(datos, aes(x = .data[[x]], y = .data[[y]], group = .data[[group]], color = .data[[group]])) +
#   geom_line(size = 0.9) + geom_point(size = 3.5) + labs(title = y) +
#   scale_y_continuous(labels = comma) + theme_minimal()
#}, res = 96)
})
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(Datos)
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
source("C:/Users/Hilario Cabrera/ADMINISTRADORA DE RIESGOS DE SALUD PALIC/Departamento De Actuaria - Documentos/Analisis RStudio/Shiny/Vacunas-R/modules/grafico.R", echo=TRUE)
runApp()
source("C:/Users/Hilario Cabrera/ADMINISTRADORA DE RIESGOS DE SALUD PALIC/Departamento De Actuaria - Documentos/Analisis RStudio/Shiny/Vacunas-R/modules/grafico.R", echo=TRUE)
runApp()
runApp()
runApp()
source("C:/Users/Hilario Cabrera/ADMINISTRADORA DE RIESGOS DE SALUD PALIC/Departamento De Actuaria - Documentos/Analisis RStudio/Shiny/Vacunas-R/modules/grafico.R", echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(Prueba)
shiny::runApp()
runApp()
# LIBRERÍAS ==========================================
library(shiny)
library(shinydashboard)
library(echarts4r)
# library(shinydashboardPlus)
# library(shinyWidgets)
library(tidyverse)
library(lubridate)
library(reactlog)
reactlog_enable()
library(readxl)
require(scales)
Datos$RECLAMANTE
View(Datos)
class(Datos$RECLAMANTE)
Datos[RECLAMANTE]
Datos[, RECLAMANTE]
Datos[RECLAMANTE,]
Datos[[RECLAMANTE]]
Datos[[5]]
Datos[['RECLAMANTE']]
View(mtcars)
mtcars[[hp]]
mtcars[['hp']]
Datos[['RECLAMANTE']]
distinct(Datos[['RECLAMANTE']])
unique(Datos[['RECLAMANTE']])
unique(Datos[['TIPO RECLAMANTE']])
runApp()
unique(Datos[['TIPO RECLAMANTE']])
arrange(unique(Datos[['TIPO RECLAMANTE']]))
sort(unique(Datos[['TIPO RECLAMANTE']]))
source("C:/Users/DH311885/ADMINISTRADORA DE RIESGOS DE SALUD PALIC/Departamento De Actuaria - Documentos/Analisis RStudio/Shiny/Vacunas-R/modules/filtros.R", echo=TRUE)
runApp()
source("C:/Users/DH311885/ADMINISTRADORA DE RIESGOS DE SALUD PALIC/Departamento De Actuaria - Documentos/Analisis RStudio/Shiny/Vacunas-R/modules/filtros.R", echo=TRUE)
# Tab Tipo Coberturas ==========================================
medidaTipoCob = medidaServer('tipo_cob')
runApp()
runApp()
runApp()
sort(unique(Datos[['TIPO RECLAMANTE']]))
mtcars[['hp']]
sort(unique(Datos[['COBERTURA']]))
mtcars[['hp']]
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
force(input)
force(output)
force(session)
View(input)
View(output)
View(session)
Q
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
View(graficoServer)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Datos %>% group_by({{x}}, {{group}}) %>%
summarise(MONTO = sum(`MONTO AUTORIZADO`),
AUTORIZACIONES = n_distinct(INTEGRALIDAD),
`MM AUTORIZACION` = MONTO / AUTORIZACIONES,
USUARIOS = n_distinct(CDPERSON),
`MM USUARIO` = MONTO / USUARIOS,
# .groups = "drop"
)
runApp()
runApp()
runApp()
runApp()
runApp()
moduleServer(id, function(input, output, session) {
# Datos Gráficos
datosGrafico = reactive(dataGraficos(x, group))
# Preparar los datos del gráfico
dataGraficos = function(x, group = NULL) {
Datos %>% group_by({{x}}, {{group}}) %>%
summarise(MONTO = sum(`MONTO AUTORIZADO`),
AUTORIZACIONES = n_distinct(INTEGRALIDAD),
`MM AUTORIZACION` = MONTO / AUTORIZACIONES,
USUARIOS = n_distinct(CDPERSON),
`MM USUARIO` = MONTO / USUARIOS,
# .groups = "drop"
)
}
# Gráfico
output$grafico <- renderPlot({
modeloGrafico(datosGrafico(), x, y, group)
}, res = 96)
# Modelo Gráfico
modeloGrafico = function(datos, x, y, group) {
ggplot(datos, aes(x = {{x}}, y = {{y}}, group = {{group}}, color = {{group}})) +
# ggplot(datos, aes(x = .data[[x]], y = .data[[y]], group = .data[[group]], color = .data[[group]])) +
geom_line(size = 0.9) + geom_point(size = 3.5) + labs(title = y) +
scale_y_continuous(labels = comma) + theme_minimal()
}
# GRAFICO DE PRUEBA
# Prueba %>% group_by(`TIPO RECLAMANTE`) %>%
#   e_charts(PERIODO) %>%
#   e_line(serie = MONTO, symbol = 'circle', symbolSize = 10) %>%
#   e_tooltip() %>% #e_tooltip(trigger = 'axis') %>%
#   e_grid(right = '30%', left = '80') %>%
#   e_legend(orient = 'vertical', right = '15', top = '15%',
#            selector = list(
#              list(type = 'inverse', title = 'Invertir'),
#              list(type = 'all', title = 'Todos')
#            ))
# e_legend(right = 0) %>%
# e_show_loading(text = "Procesando", color = "green")
# e_theme("infographic")
# e_theme("dark")%>%
#   e_title(text = "Monthly Median Single-Family Home Prices", subtext = "Source: Zillow.com",
#           sublink = "https://www.zillow.com/research/data/", left = "center"),
})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
levels(Datos$`COD COBERTURA`)
levels(Datos$RECLAMANTE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(Datos)
Datos %>% subset(`TIPO COBERTURA` %in% c('ASEGURADO','MEDICO'))
Datos %>% subset(`TIPO COBERTURA` %in% c('ASEGURADO','MEDICO')) %>% head(20)
OTRO = Datos %>% subset(`TIPO COBERTURA` %in% c('ASEGURADO','MEDICO')) %>% head(20)
View(OTRO)
OTRO = Datos %>% subset(`TIPO COBERTURA` %in% ('ASEGURADO','MEDICO')) %>% head(20)
OTRO = Datos %>% subset(`TIPO COBERTURA` %in% c('ASEGURADO','MEDICO')) %>% head(20)
View(OTRO)
OTRO = Datos %>% filter(`TIPO COBERTURA` %in% c('ASEGURADO','MEDICO')) %>% head(20)
View(OTRO)
OTRO = Datos %>% filter(`TIPO COBERTURA` %in% c('MEDICO')) %>% head(20)
View(OTRO)
OTRO = Datos %>% filter(`TIPO COBERTURA` == 'MEDICO') %>% head(20)
Datos %>% subset(`TIPO RECLAMANTE` %in% c('ASEGURADO','MEDICO')) %>% head(20)
Datos %>% subset(`TIPO RECLAMANTE` %in% ('ASEGURADO','MEDICO')) %>% head(20)
Datos %>% subset(`TIPO RECLAMANTE` %in% c('ASEGURADO','MEDICO'))
Datos %>% subset(`TIPO RECLAMANTE` %in% c('ASEGURADO','MEDICO')) %>% head(20)
Datos %>% filter(`TIPO RECLAMANTE` %in% c('ASEGURADO','MEDICO')) %>% head(20)
Datos %>% filter(`TIPO RECLAMANTE` %in% c('ASEGURADO','MEDICO')) %>% head(20)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
otro = Datos[COBERTURA]
otro = Datos[,COBERTURA]
# LIBRERÍAS ==========================================
library(shiny)
library(shinydashboard)
library(echarts4r)
# library(shinydashboardPlus)
# library(shinyWidgets)
library(tidyverse)
library(lubridate)
library(reactlog)
reactlog_enable()
library(readxl)
require(scales)
otro = Datos[,COBERTURA]
View(Datos)
otro = Datos[,COBERTURA, drop = FALSE]
otro = Datos[,COBERTURA]
otro = Datos[,"INTEGRALIDAD"]
View(otro)
otro = Datos[,COBERTURA, drop = FALSE]
otro = Datos[,"INTEGRALIDAD", drop = FALSE]
View(otro)
is.data.frame(otro)
otro = Datos[,"INTEGRALIDAD"]
is.data.frame(otro)
View(Datos)
View(Datos)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
