View(Datos)
rm(HOla)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(Datos)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Medidas  ----------------------------------------
Hola = setNames(Datos$`COD COBERTURA`, Datos$COBERTURA)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# LIBRERÍAS ==========================================
library(shiny)
library(shinydashboard)
# library(echarts4r)
# library(shinydashboardPlus)
# library(shinyWidgets)
library(tidyverse)
library(lubridate)
library(reactlog)
reactlog_enable()
library(readxl)
require(scales) # Para que la función scale_y_continuous de los gráficos funcione
source("C:/Users/DH311885/ADMINISTRADORA DE RIESGOS DE SALUD PALIC/Departamento De Actuaria - Documentos/Analisis RStudio/Shiny/Vacunas-R/modules/filtros.R", echo=TRUE)
shiny::runApp()
runApp()
runApp()
shiny::runApp()
# LIBRERÍAS ==========================================
library(shiny)
library(shinydashboard)
# library(echarts4r)
# library(shinydashboardPlus)
# library(shinyWidgets)
library(tidyverse)
library(lubridate)
library(reactlog)
reactlog_enable()
library(readxl)
require(scales)
get(Datos)
get(names(Datos))
lapply(names(Datos), get)
View(Datos)
Prueba = lapply(names(Datos), get)
x = names(Datos)
x
Prueba = lapply(names(Datos), get)
Prueba = lapply(x, get)
x = list(names(Datos))
Prueba = lapply(x, get)
x
x = list(Datos
Prueba = lapply(x, get)
x = list(Datos)
Prueba = lapply(x, get)
Prueba = lapply(x, get)
x = list(names(Datos))
Prueba = lapply(x, get)
x = names(Datos)
Prueba = lapply(x, get)
Prueba = lapply(x, get)
x
get(x)
get(Datos$COBERTURA)
get(Datos$`COD COBERTURA`)
attach(Datos)
get(Datos$`COD COBERTURA`)
get(`COD COBERTURA`)
attach(Datos)
get(`COD COBERTURA`)
x = names(Datos)
attach(Datos)
attach(Datos)
attach(Datos)
get(`COD COBERTURA`)
# library(echarts4r)
# library(shinydashboardPlus)
# library(shinyWidgets)
library(tidyverse)
attach(Datos)
get(`COD COBERTURA`)
detach(Datos)
Prueba = lapply(x, get)
attach(Datos)
detach(Datos)
detach(Datos)
detach(Datos)
attach(Datos)
get(`COD COBERTURA`)
detach(Datos)
shiny::runApp()
count(Datos,`TIPO RECLAMANTE`)
count(Datos,`TIPO RECLAMANTE`,sort = desc())
count(Datos,`TIPO RECLAMANTE`,sort = desc(`TIPO RECLAMANTE`))
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
USArrests
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Datos %>% unique(`TIPO COBERTURA`)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
unique(Datos[`TIPO RECLAMANTE`])
unique(Datos$`COD COBERTURA`)
tagList(
column(6,
selectizeInput(ns('filtro'), label = campo, choice = NULL
# choice = c('TODAS', Datos %>% distinct(.data[[campo]]))
)
)
)
runApp()
runApp()
runApp()
runApp()
source("C:/Users/Hilario Cabrera/ADMINISTRADORA DE RIESGOS DE SALUD PALIC/Departamento De Actuaria - Documentos/Analisis RStudio/Shiny/Vacunas-R/modules/filtros.R", echo=TRUE)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
# Medidas ========================================
Hola = setNames(Datos$`COD COBERTURA`, Datos$COBERTURA)
Hola
Coberturas = setNames(Datos$`COD COBERTURA`, Datos$COBERTURA)
Coberturas
Coberturas = distinct(Datos$`COD COBERTURA`, Datos$COBERTURA)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Datos %>% filter('TIPO RECLAMANTE' == 'MEDICO'),
Datos %>% filter('TIPO RECLAMANTE' == 'MEDICO')
pRUEBA = Datos %>% filter('TIPO RECLAMANTE' == 'MEDICO')
View(pRUEBA)
Datos
distinct(Datos$`TIPO RECLAMANTE`)
unique(Datos$`TIPO RECLAMANTE`)
runApp()
View(pRUEBA)
View(pRUEBA)
pRUEBA = Datos %>% filter(`TIPO RECLAMANTE` == 'MEDICO')
View(pRUEBA)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
View(Datos)
runApp()
shiny::runApp()
runApp()
View(iris)
library(echarts4r)
# Datos de pruega ========================================
Prueba = Datos %>% group_by(`TIPO RECLAMANTE`, PERIODO) %>%
summarise(MONTO = sum(`MONTO AUTORIZADO`),
AUTORIZACIONES = n_distinct(INTEGRALIDAD),
`MM AUTORIZACION` = MONTO / AUTORIZACIONES,
USUARIOS = n_distinct(CDPERSON),
`MM USUARIO` = MONTO / USUARIOS,
.groups = "drop"
)
View(Prueba)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
graficoServer <- function(id, datos, x, y, group) {
moduleServer(id, function(input, output, session) {
output$grafico <- renderEcharts4r({
datos %>% group_by(.data[[group]]) %>%
e_charts(x = .data[[x]]) %>%
e_line(serie = .data[[y]], symbol = 'circle', symbolSize = 10) %>%
e_tooltip(trigger = 'axis')
})
# ggplot(datos, aes({{x}}, {{y}}, group = {{group}}, color = {{group}})) +
# # ggplot(datos, aes(x = .data[[x]], y = .data[[y]], group = .data[[group]], color = .data[[group]])) +
#   geom_line(size = 0.9) + geom_point(size = 3.5) + labs(title = y) +
#   scale_y_continuous(labels = comma) + theme_minimal()
#}, res = 96)
})
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(Datos)
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
source("C:/Users/Hilario Cabrera/ADMINISTRADORA DE RIESGOS DE SALUD PALIC/Departamento De Actuaria - Documentos/Analisis RStudio/Shiny/Vacunas-R/modules/grafico.R", echo=TRUE)
runApp()
source("C:/Users/Hilario Cabrera/ADMINISTRADORA DE RIESGOS DE SALUD PALIC/Departamento De Actuaria - Documentos/Analisis RStudio/Shiny/Vacunas-R/modules/grafico.R", echo=TRUE)
runApp()
runApp()
runApp()
source("C:/Users/Hilario Cabrera/ADMINISTRADORA DE RIESGOS DE SALUD PALIC/Departamento De Actuaria - Documentos/Analisis RStudio/Shiny/Vacunas-R/modules/grafico.R", echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(Prueba)
shiny::runApp()
runApp()
# LIBRERÍAS ==========================================
library(shiny)
library(shinydashboard)
library(echarts4r)
# library(shinydashboardPlus)
# library(shinyWidgets)
library(tidyverse)
library(lubridate)
library(reactlog)
reactlog_enable()
library(readxl)
require(scales)
Datos$RECLAMANTE
View(Datos)
class(Datos$RECLAMANTE)
Datos[RECLAMANTE]
Datos[, RECLAMANTE]
Datos[RECLAMANTE,]
Datos[[RECLAMANTE]]
Datos[[5]]
Datos[['RECLAMANTE']]
View(mtcars)
mtcars[[hp]]
mtcars[['hp']]
Datos[['RECLAMANTE']]
distinct(Datos[['RECLAMANTE']])
unique(Datos[['RECLAMANTE']])
unique(Datos[['TIPO RECLAMANTE']])
runApp()
unique(Datos[['TIPO RECLAMANTE']])
arrange(unique(Datos[['TIPO RECLAMANTE']]))
sort(unique(Datos[['TIPO RECLAMANTE']]))
source("C:/Users/DH311885/ADMINISTRADORA DE RIESGOS DE SALUD PALIC/Departamento De Actuaria - Documentos/Analisis RStudio/Shiny/Vacunas-R/modules/filtros.R", echo=TRUE)
runApp()
source("C:/Users/DH311885/ADMINISTRADORA DE RIESGOS DE SALUD PALIC/Departamento De Actuaria - Documentos/Analisis RStudio/Shiny/Vacunas-R/modules/filtros.R", echo=TRUE)
# Tab Tipo Coberturas ==========================================
medidaTipoCob = medidaServer('tipo_cob')
runApp()
runApp()
runApp()
sort(unique(Datos[['TIPO RECLAMANTE']]))
mtcars[['hp']]
sort(unique(Datos[['COBERTURA']]))
mtcars[['hp']]
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
force(input)
force(output)
force(session)
View(input)
View(output)
View(session)
Q
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
